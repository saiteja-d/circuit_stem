import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../engine/game_engine.dart';
import '../routes.dart';
import '../services/level_manager.dart' hide levelManagerProvider;
import '../ui/controllers/debug_overlay_controller.dart';
import '../ui/widgets/debug_overlay.dart';
import 'screens/win_screen.dart';
import 'widgets/pause_menu.dart';
import 'game_canvas.dart';
import '../common/asset_manager.dart';
import '../common/logger.dart';
import '../models/component.dart';
import '../ui/widgets/component_palette.dart';
import '../core/providers.dart';
import '../common/theme.dart';

class GameScreen extends ConsumerStatefulWidget {
  const GameScreen({super.key});

  @override
  ConsumerState<GameScreen> createState() => _GameScreenState();
}

class _GameScreenState extends ConsumerState<GameScreen> with TickerProviderStateMixin {
  late AnimationController _celebrationController;
  bool _showTutorial = false;
  ComponentModel? _selectedComponent;

  @override
  void initState() {
    super.initState();
    _celebrationController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );
  }

  @override
  void dispose() {
    _celebrationController.dispose();
    super.dispose();
  }

  void _showTutorialOverlay() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Welcome to Level 1!'),
          content: const SingleChildScrollView(
            child: ListBody(
              children: [
                Text('Here are some tips to get started:'),
                SizedBox(height: 8),
                Text('1. Drag components from the palette on the right'),
                Text('2. Connect power sources to create circuits'),
                Text('3. Light up all the bulbs to complete the level'),
              ],
            ),
          ),
          actions: [
            TextButton(
              child: const Text('Got it!'),
              onPressed: () {
                Navigator.of(context).pop();
                setState(() {
                  _showTutorial = false;
                });
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final levelManager = ref.watch(levelManagerProvider);
    final assetManager = ref.watch(assetManagerProvider);
    final debugController = ref.watch(debugOverlayControllerProvider);
    final gameEngine = ref.watch(gameEngineProvider);
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return Scaffold(
      body: Stack(
        children: [
          Container(
            color: isDark ? DarkModeColors.darkSurface : LightModeColors.lightSurface,
            child: Row(
              children: [
                Expanded(
                  flex: 3,
                  child: GameCanvas(
                    key: ValueKey(levelManager.currentLevel.id),
                  ),
                ),
                SizedBox(
                  width: 200,
                  child: ComponentPalette(
                    components: levelManager.currentLevel.availableComponents,
                    onComponentSelected: (component) {
                      setState(() {
                        _selectedComponent = component;
                      });
                    },
                    selectedComponent: _selectedComponent,
                  ),
                ),
              ],
            ),
          ),
          if (debugController.isVisible)
            const Positioned(
              top: 16,
              right: 16,
              child: DebugOverlay(),
            ),
          if (gameEngine.isPaused)
            PauseMenu(
              onResume: () {
                gameEngine.togglePause();
              },
              onRestart: () {
                gameEngine.resetLevel();
              },
              onExit: () {
                Navigator.pushReplacementNamed(context, AppRoutes.levelSelect);
              },
            ),
        ],
      ),
    );
  }
}
